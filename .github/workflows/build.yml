name: Build and Release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  GO_VERSION: '1.21'

jobs:
  prepare:
    name: Prepare Version Info
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_clean: ${{ steps.version.outputs.version_clean }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      build_time: ${{ steps.version.outputs.build_time }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for tags

      - name: Extract version from tag
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            # Extract version from tag (remove 'v' prefix if present)
            VERSION="${{ github.ref_name }}"
            VERSION_CLEAN=$(echo "$VERSION" | sed 's/^v//')
            
            # Check if it's a prerelease
            if [[ "$VERSION_CLEAN" =~ (alpha|beta|rc) ]]; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          else
            # For non-tag builds, use commit SHA
            VERSION="dev-${{ github.sha }}"
            VERSION_CLEAN="$VERSION"
            IS_PRERELEASE="true"
          fi
          
          BUILD_TIME=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_clean=$VERSION_CLEAN" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "build_time=$BUILD_TIME" >> $GITHUB_OUTPUT
          
          echo "Version: $VERSION"
          echo "Clean Version: $VERSION_CLEAN"
          echo "Is Prerelease: $IS_PRERELEASE"
          echo "Build Time: $BUILD_TIME"

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: prepare
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Verify dependencies
        run: go mod verify

      - name: Run tests
        run: go test -v ./...

      - name: Run linter
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ${{ matrix.os }}
    needs: [prepare, test]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            arch: amd64
            goos: linux
            goarch: amd64
            suffix: linux_amd64
          - os: ubuntu-latest
            arch: arm64
            goos: linux
            goarch: arm64
            suffix: linux_arm64
          - os: macos-latest
            arch: amd64
            goos: darwin
            goarch: amd64
            suffix: darwin_amd64
          - os: macos-latest
            arch: arm64
            goos: darwin
            goarch: arm64
            suffix: darwin_arm64
          - os: windows-latest
            arch: amd64
            goos: windows
            goarch: amd64
            suffix: windows_amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Cache Go modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Download dependencies
        run: go mod download

      - name: Build binary
        run: |
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} CGO_ENABLED=0 go build \
            -ldflags="-s -w -X main.version=${{ needs.prepare.outputs.version_clean }} -X main.buildTime=${{ needs.prepare.outputs.build_time }} -X main.gitCommit=${{ github.sha }}" \
            -o gitx_${{ matrix.suffix }} \
            main.go

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: gitx_${{ matrix.suffix }}
          path: gitx_${{ matrix.suffix }}
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [prepare, test, build]
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create release archive
        run: |
          mkdir -p release
          for artifact in gitx_*; do
            if [ -f "$artifact" ]; then
              cp "$artifact" "release/"
            fi
          done
          
          # Create checksums
          cd release
          sha256sum gitx_* > checksums.txt
          
          # Create archive
          tar -czf ../gitx-${{ needs.prepare.outputs.version_clean }}-binaries.tar.gz *
          cd ..
          
          # Create individual archives for each platform
          for binary in release/gitx_*; do
            if [ -f "$binary" ]; then
              filename=$(basename "$binary")
              platform=$(echo "$filename" | sed 's/gitx_//' | sed 's/\.exe$//')
              tar -czf "gitx-${{ needs.prepare.outputs.version_clean }}-$platform.tar.gz" -C release "$filename"
            fi
          done

      - name: Generate release notes
        run: |
          cat > release_notes.md << EOF
          ## GitX ${{ needs.prepare.outputs.version }}
          
          ### Downloads
          
          **All Platforms Archive:**
          - \`gitx-${{ needs.prepare.outputs.version_clean }}-binaries.tar.gz\` - Contains all platform binaries
          
          **Individual Platform Archives:**
          - \`gitx-${{ needs.prepare.outputs.version_clean }}-linux_amd64.tar.gz\` - Linux AMD64
          - \`gitx-${{ needs.prepare.outputs.version_clean }}-linux_arm64.tar.gz\` - Linux ARM64
          - \`gitx-${{ needs.prepare.outputs.version_clean }}-darwin_amd64.tar.gz\` - macOS Intel
          - \`gitx-${{ needs.prepare.outputs.version_clean }}-darwin_arm64.tar.gz\` - macOS Apple Silicon
          - \`gitx-${{ needs.prepare.outputs.version_clean }}-windows_amd64.tar.gz\` - Windows AMD64
          
          ### Installation
          
          \`\`\`bash
          # Download and extract
          wget https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gitx-${{ needs.prepare.outputs.version_clean }}-$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m).tar.gz
          tar -xzf gitx-${{ needs.prepare.outputs.version_clean }}-$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m).tar.gz
          sudo mv gitx /usr/local/bin/
          \`\`\`
          
          ### Verification
          
          Download \`checksums.txt\` and verify your binary:
          \`\`\`bash
          sha256sum -c checksums.txt
          \`\`\`
          
          ### Version Information
          
          - **Version**: ${{ needs.prepare.outputs.version }}
          - **Build Time**: ${{ needs.prepare.outputs.build_time }}
          - **Git Commit**: ${{ github.sha }}
          - **Go Version**: ${{ env.GO_VERSION }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: GitX ${{ needs.prepare.outputs.version }}
          body_path: release_notes.md
          files: |
            gitx-${{ needs.prepare.outputs.version_clean }}-binaries.tar.gz
            gitx-${{ needs.prepare.outputs.version_clean }}-linux_amd64.tar.gz
            gitx-${{ needs.prepare.outputs.version_clean }}-linux_arm64.tar.gz
            gitx-${{ needs.prepare.outputs.version_clean }}-darwin_amd64.tar.gz
            gitx-${{ needs.prepare.outputs.version_clean }}-darwin_arm64.tar.gz
            gitx-${{ needs.prepare.outputs.version_clean }}-windows_amd64.tar.gz
            release/checksums.txt
          draft: false
          prerelease: ${{ needs.prepare.outputs.is_prerelease }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
